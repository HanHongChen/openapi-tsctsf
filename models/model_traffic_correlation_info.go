/*
 * Ntsctsf_QoSandTSCAssistance Service API
 *
 * TSCTSF QoS and TSC Assistance Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * Source file: 3GPP TS 29.565 V18.3.0; 5G System; Time Sensitive Communication and Time Synchronization function  Services; Stage 3. 
 * Url: https://www.3gpp.org/ftp/Specs/archive/29_series/29.565/
 *
 * API version: 1.1.0-alpha.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	
	"encoding/json"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/bsontype"
	
    "bitbucket.org/free5GC/openapi/custom"
)



// Contains the information for traffic correlation. 
type TrafficCorrelationInfo struct {
	CorrType CorrelationType `json:"corrType,omitempty" yaml:"corrType" bson:"corrType,omitempty"`
	// Identification of a set of UEs accessing the application identified by the  Application Identifier or traffic filtering information. 
	TfcCorrId string `json:"tfcCorrId,omitempty" yaml:"tfcCorrId" bson:"tfcCorrId,omitempty"`
	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166 with the OpenAPI defined 'nullable: true' property. 
	ComEasIpv4Addr *custom.Nullable[string] `json:"comEasIpv4Addr,omitempty" yaml:"comEasIpv4Addr" bson:"comEasIpv4Addr,omitempty"`
	ComEasIpv6Addr *custom.Nullable[string] `json:"comEasIpv6Addr,omitempty" yaml:"comEasIpv6Addr" bson:"comEasIpv6Addr,omitempty"`
	FqdnRange *custom.Nullable[[]FqdnPatternMatchingRule] `json:"fqdnRange,omitempty" yaml:"fqdnRange" bson:"fqdnRange,omitempty"`
	// String providing an URI formatted according to RFC 3986 with the OpenAPI 'nullable: true' property. 
	NotifUri *custom.Nullable[string] `json:"notifUri,omitempty" yaml:"notifUri" bson:"notifUri,omitempty"`
	// Notification correlation identifier.
	NotifCorrId *custom.Nullable[string] `json:"notifCorrId,omitempty" yaml:"notifCorrId" bson:"notifCorrId,omitempty"`
}
var _ json.Unmarshaler = (*TrafficCorrelationInfo)(nil)

func (m *TrafficCorrelationInfo) UnmarshalJSON(data []byte) error {
	var err error
	var b _TrafficCorrelationInfoJSONUnmarshalBuffer
	if err = json.Unmarshal(data, &b); err != nil {
		return err
	}
	m.CorrType = b.CorrType
	m.TfcCorrId = b.TfcCorrId
	if len(b.ComEasIpv4Addr) != 0 {
		m.ComEasIpv4Addr = custom.NewNullableNull[string]()
		err = m.ComEasIpv4Addr.UnmarshalJSON(b.ComEasIpv4Addr)
		if err != nil {
			return err
		}
	}
	if len(b.ComEasIpv6Addr) != 0 {
		m.ComEasIpv6Addr = custom.NewNullableNull[string]()
		err = m.ComEasIpv6Addr.UnmarshalJSON(b.ComEasIpv6Addr)
		if err != nil {
			return err
		}
	}
	if len(b.FqdnRange) != 0 {
		m.FqdnRange = custom.NewNullableNull[[]FqdnPatternMatchingRule]()
		err = m.FqdnRange.UnmarshalJSON(b.FqdnRange)
		if err != nil {
			return err
		}
	}
	if len(b.NotifUri) != 0 {
		m.NotifUri = custom.NewNullableNull[string]()
		err = m.NotifUri.UnmarshalJSON(b.NotifUri)
		if err != nil {
			return err
		}
	}
	if len(b.NotifCorrId) != 0 {
		m.NotifCorrId = custom.NewNullableNull[string]()
		err = m.NotifCorrId.UnmarshalJSON(b.NotifCorrId)
		if err != nil {
			return err
		}
	}

	return nil
}

// _TrafficCorrelationInfoJSONUnmarshaler is used to unmarshal the null properties into the TrafficCorrelationInfo struct
type _TrafficCorrelationInfoJSONUnmarshalBuffer struct {
	CorrType CorrelationType `json:"corrType,omitempty"`
	TfcCorrId string `json:"tfcCorrId,omitempty"`
	ComEasIpv4Addr json.RawMessage `json:"comEasIpv4Addr,omitempty"`
	ComEasIpv6Addr json.RawMessage `json:"comEasIpv6Addr,omitempty"`
	FqdnRange json.RawMessage `json:"fqdnRange,omitempty"`
	NotifUri json.RawMessage `json:"notifUri,omitempty"`
	NotifCorrId json.RawMessage `json:"notifCorrId,omitempty"`
}

var _ bson.Unmarshaler = (*TrafficCorrelationInfo)(nil)

func (m *TrafficCorrelationInfo) UnmarshalBSON(data []byte) error {
	var err error
	var b _TrafficCorrelationInfoBSONUnmarshalBuffer
	if err = bson.Unmarshal(data, &b); err != nil {
		return err
	}
	m.CorrType = b.CorrType
	m.TfcCorrId = b.TfcCorrId
	if b.ComEasIpv4Addr != nil {
		var bt bsontype.Type
		switch len(b.ComEasIpv4Addr) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeString
		}
		m.ComEasIpv4Addr = custom.NewNullableNull[string]()
		err = m.ComEasIpv4Addr.UnmarshalBSONValue(bt, b.ComEasIpv4Addr)
		if err != nil {
			return err
		}
	}
	if b.ComEasIpv6Addr != nil {
		var bt bsontype.Type
		switch len(b.ComEasIpv6Addr) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeEmbeddedDocument
		}
		m.ComEasIpv6Addr = custom.NewNullableNull[string]()
		err = m.ComEasIpv6Addr.UnmarshalBSONValue(bt, b.ComEasIpv6Addr)
		if err != nil {
			return err
		}
	}
	if b.FqdnRange != nil {
		var bt bsontype.Type
		switch len(b.FqdnRange) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeArray
		}
		m.FqdnRange = custom.NewNullableNull[[]FqdnPatternMatchingRule]()
		err = m.FqdnRange.UnmarshalBSONValue(bt, b.FqdnRange)
		if err != nil {
			return err
		}
	}
	if b.NotifUri != nil {
		var bt bsontype.Type
		switch len(b.NotifUri) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeString
		}
		m.NotifUri = custom.NewNullableNull[string]()
		err = m.NotifUri.UnmarshalBSONValue(bt, b.NotifUri)
		if err != nil {
			return err
		}
	}
	if b.NotifCorrId != nil {
		var bt bsontype.Type
		switch len(b.NotifCorrId) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeString
		}
		m.NotifCorrId = custom.NewNullableNull[string]()
		err = m.NotifCorrId.UnmarshalBSONValue(bt, b.NotifCorrId)
		if err != nil {
			return err
		}
	}

	return nil
}

// _TrafficCorrelationInfoBSONUnmarshalBuffer is used to unmarshal the null properties into the TrafficCorrelationInfo struct
type _TrafficCorrelationInfoBSONUnmarshalBuffer struct {
	CorrType CorrelationType `bson:"corrType,omitempty"`
	TfcCorrId string `bson:"tfcCorrId,omitempty"`
	ComEasIpv4Addr bson.Raw `bson:"comEasIpv4Addr,omitempty"`
	ComEasIpv6Addr bson.Raw `bson:"comEasIpv6Addr,omitempty"`
	FqdnRange bson.Raw `bson:"fqdnRange,omitempty"`
	NotifUri bson.Raw `bson:"notifUri,omitempty"`
	NotifCorrId bson.Raw `bson:"notifCorrId,omitempty"`
}

