/*
 * Ntsctsf_QoSandTSCAssistance Service API
 *
 * TSCTSF QoS and TSC Assistance Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * Source file: 3GPP TS 29.565 V18.3.0; 5G System; Time Sensitive Communication and Time Synchronization function  Services; Stage 3. 
 * Url: https://www.3gpp.org/ftp/Specs/archive/29_series/29.565/
 *
 * API version: 1.1.0-alpha.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	
	"encoding/json"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/bsontype"
	
    "bitbucket.org/free5GC/openapi/custom"
)



// Represents the same as the QosMonitoringInformation data type but with the nullable:true property. 
type QosMonitoringInformationRm struct {
	ReqQosMonParams []RequestedQosMonitoringParameter `json:"reqQosMonParams,omitempty" yaml:"reqQosMonParams" bson:"reqQosMonParams,omitempty"`
	RepFreqs []ReportingFrequency `json:"repFreqs,omitempty" yaml:"repFreqs" bson:"repFreqs,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible with the OpenAPI 'nullable: true' property. 
	RepThreshDl *custom.Nullable[int32] `json:"repThreshDl,omitempty" yaml:"repThreshDl" bson:"repThreshDl,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible with the OpenAPI 'nullable: true' property. 
	RepThreshUl *custom.Nullable[int32] `json:"repThreshUl,omitempty" yaml:"repThreshUl" bson:"repThreshUl,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible with the OpenAPI 'nullable: true' property. 
	RepThreshRp *custom.Nullable[int32] `json:"repThreshRp,omitempty" yaml:"repThreshRp" bson:"repThreshRp,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible with the OpenAPI 'nullable: true' property. 
	ConThreshDl *custom.Nullable[int32] `json:"conThreshDl,omitempty" yaml:"conThreshDl" bson:"conThreshDl,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible with the OpenAPI 'nullable: true' property. 
	ConThreshUl *custom.Nullable[int32] `json:"conThreshUl,omitempty" yaml:"conThreshUl" bson:"conThreshUl,omitempty"`
	// Unsigned integer identifying a period of time in units of seconds with \"nullable=true\" property. 
	WaitTime *custom.Nullable[int32] `json:"waitTime,omitempty" yaml:"waitTime" bson:"waitTime,omitempty"`
	// Unsigned integer identifying a period of time in units of seconds with \"nullable=true\" property. 
	RepPeriod *custom.Nullable[int32] `json:"repPeriod,omitempty" yaml:"repPeriod" bson:"repPeriod,omitempty"`
	// This data type is defined in the same way as the 'BitRate' data type, but with the OpenAPI 'nullable: true' property. 
	RepThreshDatRateDl *custom.Nullable[string] `json:"repThreshDatRateDl,omitempty" yaml:"repThreshDatRateDl" bson:"repThreshDatRateDl,omitempty"`
	// This data type is defined in the same way as the 'BitRate' data type, but with the OpenAPI 'nullable: true' property. 
	RepThreshDatRateUl *custom.Nullable[string] `json:"repThreshDatRateUl,omitempty" yaml:"repThreshDatRateUl" bson:"repThreshDatRateUl,omitempty"`
	// This data type is defined in the same way as the 'BitRate' data type, but with the OpenAPI 'nullable: true' property. 
	ConsDataRateThrDl *custom.Nullable[string] `json:"consDataRateThrDl,omitempty" yaml:"consDataRateThrDl" bson:"consDataRateThrDl,omitempty"`
	// This data type is defined in the same way as the 'BitRate' data type, but with the OpenAPI 'nullable: true' property. 
	ConsDataRateThrUl *custom.Nullable[string] `json:"consDataRateThrUl,omitempty" yaml:"consDataRateThrUl" bson:"consDataRateThrUl,omitempty"`
}
var _ json.Unmarshaler = (*QosMonitoringInformationRm)(nil)

func (m *QosMonitoringInformationRm) UnmarshalJSON(data []byte) error {
	var err error
	var b _QosMonitoringInformationRmJSONUnmarshalBuffer
	if err = json.Unmarshal(data, &b); err != nil {
		return err
	}
	m.ReqQosMonParams = b.ReqQosMonParams
	m.RepFreqs = b.RepFreqs
	if len(b.RepThreshDl) != 0 {
		m.RepThreshDl = custom.NewNullableNull[int32]()
		err = m.RepThreshDl.UnmarshalJSON(b.RepThreshDl)
		if err != nil {
			return err
		}
	}
	if len(b.RepThreshUl) != 0 {
		m.RepThreshUl = custom.NewNullableNull[int32]()
		err = m.RepThreshUl.UnmarshalJSON(b.RepThreshUl)
		if err != nil {
			return err
		}
	}
	if len(b.RepThreshRp) != 0 {
		m.RepThreshRp = custom.NewNullableNull[int32]()
		err = m.RepThreshRp.UnmarshalJSON(b.RepThreshRp)
		if err != nil {
			return err
		}
	}
	if len(b.ConThreshDl) != 0 {
		m.ConThreshDl = custom.NewNullableNull[int32]()
		err = m.ConThreshDl.UnmarshalJSON(b.ConThreshDl)
		if err != nil {
			return err
		}
	}
	if len(b.ConThreshUl) != 0 {
		m.ConThreshUl = custom.NewNullableNull[int32]()
		err = m.ConThreshUl.UnmarshalJSON(b.ConThreshUl)
		if err != nil {
			return err
		}
	}
	if len(b.WaitTime) != 0 {
		m.WaitTime = custom.NewNullableNull[int32]()
		err = m.WaitTime.UnmarshalJSON(b.WaitTime)
		if err != nil {
			return err
		}
	}
	if len(b.RepPeriod) != 0 {
		m.RepPeriod = custom.NewNullableNull[int32]()
		err = m.RepPeriod.UnmarshalJSON(b.RepPeriod)
		if err != nil {
			return err
		}
	}
	if len(b.RepThreshDatRateDl) != 0 {
		m.RepThreshDatRateDl = custom.NewNullableNull[string]()
		err = m.RepThreshDatRateDl.UnmarshalJSON(b.RepThreshDatRateDl)
		if err != nil {
			return err
		}
	}
	if len(b.RepThreshDatRateUl) != 0 {
		m.RepThreshDatRateUl = custom.NewNullableNull[string]()
		err = m.RepThreshDatRateUl.UnmarshalJSON(b.RepThreshDatRateUl)
		if err != nil {
			return err
		}
	}
	if len(b.ConsDataRateThrDl) != 0 {
		m.ConsDataRateThrDl = custom.NewNullableNull[string]()
		err = m.ConsDataRateThrDl.UnmarshalJSON(b.ConsDataRateThrDl)
		if err != nil {
			return err
		}
	}
	if len(b.ConsDataRateThrUl) != 0 {
		m.ConsDataRateThrUl = custom.NewNullableNull[string]()
		err = m.ConsDataRateThrUl.UnmarshalJSON(b.ConsDataRateThrUl)
		if err != nil {
			return err
		}
	}

	return nil
}

// _QosMonitoringInformationRmJSONUnmarshaler is used to unmarshal the null properties into the QosMonitoringInformationRm struct
type _QosMonitoringInformationRmJSONUnmarshalBuffer struct {
	ReqQosMonParams []RequestedQosMonitoringParameter `json:"reqQosMonParams,omitempty"`
	RepFreqs []ReportingFrequency `json:"repFreqs,omitempty"`
	RepThreshDl json.RawMessage `json:"repThreshDl,omitempty"`
	RepThreshUl json.RawMessage `json:"repThreshUl,omitempty"`
	RepThreshRp json.RawMessage `json:"repThreshRp,omitempty"`
	ConThreshDl json.RawMessage `json:"conThreshDl,omitempty"`
	ConThreshUl json.RawMessage `json:"conThreshUl,omitempty"`
	WaitTime json.RawMessage `json:"waitTime,omitempty"`
	RepPeriod json.RawMessage `json:"repPeriod,omitempty"`
	RepThreshDatRateDl json.RawMessage `json:"repThreshDatRateDl,omitempty"`
	RepThreshDatRateUl json.RawMessage `json:"repThreshDatRateUl,omitempty"`
	ConsDataRateThrDl json.RawMessage `json:"consDataRateThrDl,omitempty"`
	ConsDataRateThrUl json.RawMessage `json:"consDataRateThrUl,omitempty"`
}

var _ bson.Unmarshaler = (*QosMonitoringInformationRm)(nil)

func (m *QosMonitoringInformationRm) UnmarshalBSON(data []byte) error {
	var err error
	var b _QosMonitoringInformationRmBSONUnmarshalBuffer
	if err = bson.Unmarshal(data, &b); err != nil {
		return err
	}
	m.ReqQosMonParams = b.ReqQosMonParams
	m.RepFreqs = b.RepFreqs
	if b.RepThreshDl != nil {
		var bt bsontype.Type
		switch len(b.RepThreshDl) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeInt32
		}
		m.RepThreshDl = custom.NewNullableNull[int32]()
		err = m.RepThreshDl.UnmarshalBSONValue(bt, b.RepThreshDl)
		if err != nil {
			return err
		}
	}
	if b.RepThreshUl != nil {
		var bt bsontype.Type
		switch len(b.RepThreshUl) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeInt32
		}
		m.RepThreshUl = custom.NewNullableNull[int32]()
		err = m.RepThreshUl.UnmarshalBSONValue(bt, b.RepThreshUl)
		if err != nil {
			return err
		}
	}
	if b.RepThreshRp != nil {
		var bt bsontype.Type
		switch len(b.RepThreshRp) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeInt32
		}
		m.RepThreshRp = custom.NewNullableNull[int32]()
		err = m.RepThreshRp.UnmarshalBSONValue(bt, b.RepThreshRp)
		if err != nil {
			return err
		}
	}
	if b.ConThreshDl != nil {
		var bt bsontype.Type
		switch len(b.ConThreshDl) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeInt32
		}
		m.ConThreshDl = custom.NewNullableNull[int32]()
		err = m.ConThreshDl.UnmarshalBSONValue(bt, b.ConThreshDl)
		if err != nil {
			return err
		}
	}
	if b.ConThreshUl != nil {
		var bt bsontype.Type
		switch len(b.ConThreshUl) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeInt32
		}
		m.ConThreshUl = custom.NewNullableNull[int32]()
		err = m.ConThreshUl.UnmarshalBSONValue(bt, b.ConThreshUl)
		if err != nil {
			return err
		}
	}
	if b.WaitTime != nil {
		var bt bsontype.Type
		switch len(b.WaitTime) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeInt32
		}
		m.WaitTime = custom.NewNullableNull[int32]()
		err = m.WaitTime.UnmarshalBSONValue(bt, b.WaitTime)
		if err != nil {
			return err
		}
	}
	if b.RepPeriod != nil {
		var bt bsontype.Type
		switch len(b.RepPeriod) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeInt32
		}
		m.RepPeriod = custom.NewNullableNull[int32]()
		err = m.RepPeriod.UnmarshalBSONValue(bt, b.RepPeriod)
		if err != nil {
			return err
		}
	}
	if b.RepThreshDatRateDl != nil {
		var bt bsontype.Type
		switch len(b.RepThreshDatRateDl) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeString
		}
		m.RepThreshDatRateDl = custom.NewNullableNull[string]()
		err = m.RepThreshDatRateDl.UnmarshalBSONValue(bt, b.RepThreshDatRateDl)
		if err != nil {
			return err
		}
	}
	if b.RepThreshDatRateUl != nil {
		var bt bsontype.Type
		switch len(b.RepThreshDatRateUl) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeString
		}
		m.RepThreshDatRateUl = custom.NewNullableNull[string]()
		err = m.RepThreshDatRateUl.UnmarshalBSONValue(bt, b.RepThreshDatRateUl)
		if err != nil {
			return err
		}
	}
	if b.ConsDataRateThrDl != nil {
		var bt bsontype.Type
		switch len(b.ConsDataRateThrDl) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeString
		}
		m.ConsDataRateThrDl = custom.NewNullableNull[string]()
		err = m.ConsDataRateThrDl.UnmarshalBSONValue(bt, b.ConsDataRateThrDl)
		if err != nil {
			return err
		}
	}
	if b.ConsDataRateThrUl != nil {
		var bt bsontype.Type
		switch len(b.ConsDataRateThrUl) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeString
		}
		m.ConsDataRateThrUl = custom.NewNullableNull[string]()
		err = m.ConsDataRateThrUl.UnmarshalBSONValue(bt, b.ConsDataRateThrUl)
		if err != nil {
			return err
		}
	}

	return nil
}

// _QosMonitoringInformationRmBSONUnmarshalBuffer is used to unmarshal the null properties into the QosMonitoringInformationRm struct
type _QosMonitoringInformationRmBSONUnmarshalBuffer struct {
	ReqQosMonParams []RequestedQosMonitoringParameter `bson:"reqQosMonParams,omitempty"`
	RepFreqs []ReportingFrequency `bson:"repFreqs,omitempty"`
	RepThreshDl bson.Raw `bson:"repThreshDl,omitempty"`
	RepThreshUl bson.Raw `bson:"repThreshUl,omitempty"`
	RepThreshRp bson.Raw `bson:"repThreshRp,omitempty"`
	ConThreshDl bson.Raw `bson:"conThreshDl,omitempty"`
	ConThreshUl bson.Raw `bson:"conThreshUl,omitempty"`
	WaitTime bson.Raw `bson:"waitTime,omitempty"`
	RepPeriod bson.Raw `bson:"repPeriod,omitempty"`
	RepThreshDatRateDl bson.Raw `bson:"repThreshDatRateDl,omitempty"`
	RepThreshDatRateUl bson.Raw `bson:"repThreshDatRateUl,omitempty"`
	ConsDataRateThrDl bson.Raw `bson:"consDataRateThrDl,omitempty"`
	ConsDataRateThrUl bson.Raw `bson:"consDataRateThrUl,omitempty"`
}

