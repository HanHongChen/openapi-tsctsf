/*
 * Ntsctsf_QoSandTSCAssistance Service API
 *
 * TSCTSF QoS and TSC Assistance Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * Source file: 3GPP TS 29.565 V18.3.0; 5G System; Time Sensitive Communication and Time Synchronization function  Services; Stage 3. 
 * Url: https://www.3gpp.org/ftp/Specs/archive/29_series/29.565/
 *
 * API version: 1.1.0-alpha.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	
	"encoding/json"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/bsontype"
	
    "bitbucket.org/free5GC/openapi/custom"
)



// Describes the authorization data of an Individual TSC Application Session Context created by the PCF. 
type TscAppSessionContextUpdateData struct {
	// String providing an URI formatted according to RFC 3986.
	NotifUri string `json:"notifUri,omitempty" yaml:"notifUri" bson:"notifUri,omitempty"`
	// Identifies the Application Identifier.
	AppId string `json:"appId,omitempty" yaml:"appId" bson:"appId,omitempty"`
	EthFlowInfo []EthFlowDescription `json:"ethFlowInfo,omitempty" yaml:"ethFlowInfo" bson:"ethFlowInfo,omitempty"`
	// Identifies the Ethernet flows which require QoS. Each Ethernet flow consists of a flow identifer and the corresponding UL and/or DL flows. 
	EnEthFlowInfo []EthFlowInfo `json:"enEthFlowInfo,omitempty" yaml:"enEthFlowInfo" bson:"enEthFlowInfo,omitempty"`
	FlowInfo []FlowInfo `json:"flowInfo,omitempty" yaml:"flowInfo" bson:"flowInfo,omitempty"`
	TscQosReq *TscQosRequirementRm `json:"tscQosReq,omitempty" yaml:"tscQosReq" bson:"tscQosReq,omitempty"`
	// Identifies a pre-defined QoS information.
	QosReference string `json:"qosReference,omitempty" yaml:"qosReference" bson:"qosReference,omitempty"`
	// Identifies an ordered list of pre-defined QoS information.
	AltQosReferences []string `json:"altQosReferences,omitempty" yaml:"altQosReferences" bson:"altQosReferences,omitempty"`
	// Identifies an ordered list of alternative service requirements that include individual QoS parameter sets. The lower the index of the array for a given entry, the higher the priority. 
	AltQosReqs []AlternativeServiceRequirementsData `json:"altQosReqs,omitempty" yaml:"altQosReqs" bson:"altQosReqs,omitempty"`
	// Contains an identity of an application service provider.
	AspId string `json:"aspId,omitempty" yaml:"aspId" bson:"aspId,omitempty"`
	// Contains an identity of a sponsor.
	SponId string `json:"sponId,omitempty" yaml:"sponId" bson:"sponId,omitempty"`
	SponStatus SponsoringStatus `json:"sponStatus,omitempty" yaml:"sponStatus" bson:"sponStatus,omitempty"`
	EvSubsc *custom.Nullable[EventsSubscReqDataRm] `json:"evSubsc,omitempty" yaml:"evSubsc" bson:"evSubsc,omitempty"`
	TempInValidity *TemporalInValidity `json:"tempInValidity,omitempty" yaml:"tempInValidity" bson:"tempInValidity,omitempty"`
}
var _ json.Unmarshaler = (*TscAppSessionContextUpdateData)(nil)

func (m *TscAppSessionContextUpdateData) UnmarshalJSON(data []byte) error {
	var err error
	var b _TscAppSessionContextUpdateDataJSONUnmarshalBuffer
	if err = json.Unmarshal(data, &b); err != nil {
		return err
	}
	m.NotifUri = b.NotifUri
	m.AppId = b.AppId
	m.EthFlowInfo = b.EthFlowInfo
	m.EnEthFlowInfo = b.EnEthFlowInfo
	m.FlowInfo = b.FlowInfo
	m.TscQosReq = b.TscQosReq
	m.QosReference = b.QosReference
	m.AltQosReferences = b.AltQosReferences
	m.AltQosReqs = b.AltQosReqs
	m.AspId = b.AspId
	m.SponId = b.SponId
	m.SponStatus = b.SponStatus
	if len(b.EvSubsc) != 0 {
		m.EvSubsc = custom.NewNullableNull[EventsSubscReqDataRm]()
		err = m.EvSubsc.UnmarshalJSON(b.EvSubsc)
		if err != nil {
			return err
		}
	}
	m.TempInValidity = b.TempInValidity

	return nil
}

// _TscAppSessionContextUpdateDataJSONUnmarshaler is used to unmarshal the null properties into the TscAppSessionContextUpdateData struct
type _TscAppSessionContextUpdateDataJSONUnmarshalBuffer struct {
	NotifUri string `json:"notifUri,omitempty"`
	AppId string `json:"appId,omitempty"`
	EthFlowInfo []EthFlowDescription `json:"ethFlowInfo,omitempty"`
	EnEthFlowInfo []EthFlowInfo `json:"enEthFlowInfo,omitempty"`
	FlowInfo []FlowInfo `json:"flowInfo,omitempty"`
	TscQosReq *TscQosRequirementRm `json:"tscQosReq,omitempty"`
	QosReference string `json:"qosReference,omitempty"`
	AltQosReferences []string `json:"altQosReferences,omitempty"`
	AltQosReqs []AlternativeServiceRequirementsData `json:"altQosReqs,omitempty"`
	AspId string `json:"aspId,omitempty"`
	SponId string `json:"sponId,omitempty"`
	SponStatus SponsoringStatus `json:"sponStatus,omitempty"`
	EvSubsc json.RawMessage `json:"evSubsc,omitempty"`
	TempInValidity *TemporalInValidity `json:"tempInValidity,omitempty"`
}

var _ bson.Unmarshaler = (*TscAppSessionContextUpdateData)(nil)

func (m *TscAppSessionContextUpdateData) UnmarshalBSON(data []byte) error {
	var err error
	var b _TscAppSessionContextUpdateDataBSONUnmarshalBuffer
	if err = bson.Unmarshal(data, &b); err != nil {
		return err
	}
	m.NotifUri = b.NotifUri
	m.AppId = b.AppId
	m.EthFlowInfo = b.EthFlowInfo
	m.EnEthFlowInfo = b.EnEthFlowInfo
	m.FlowInfo = b.FlowInfo
	m.TscQosReq = b.TscQosReq
	m.QosReference = b.QosReference
	m.AltQosReferences = b.AltQosReferences
	m.AltQosReqs = b.AltQosReqs
	m.AspId = b.AspId
	m.SponId = b.SponId
	m.SponStatus = b.SponStatus
	if b.EvSubsc != nil {
		var bt bsontype.Type
		switch len(b.EvSubsc) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeEmbeddedDocument
		}
		m.EvSubsc = custom.NewNullableNull[EventsSubscReqDataRm]()
		err = m.EvSubsc.UnmarshalBSONValue(bt, b.EvSubsc)
		if err != nil {
			return err
		}
	}
	m.TempInValidity = b.TempInValidity

	return nil
}

// _TscAppSessionContextUpdateDataBSONUnmarshalBuffer is used to unmarshal the null properties into the TscAppSessionContextUpdateData struct
type _TscAppSessionContextUpdateDataBSONUnmarshalBuffer struct {
	NotifUri string `bson:"notifUri,omitempty"`
	AppId string `bson:"appId,omitempty"`
	EthFlowInfo []EthFlowDescription `bson:"ethFlowInfo,omitempty"`
	EnEthFlowInfo []EthFlowInfo `bson:"enEthFlowInfo,omitempty"`
	FlowInfo []FlowInfo `bson:"flowInfo,omitempty"`
	TscQosReq *TscQosRequirementRm `bson:"tscQosReq,omitempty"`
	QosReference string `bson:"qosReference,omitempty"`
	AltQosReferences []string `bson:"altQosReferences,omitempty"`
	AltQosReqs []AlternativeServiceRequirementsData `bson:"altQosReqs,omitempty"`
	AspId string `bson:"aspId,omitempty"`
	SponId string `bson:"sponId,omitempty"`
	SponStatus SponsoringStatus `bson:"sponStatus,omitempty"`
	EvSubsc bson.Raw `bson:"evSubsc,omitempty"`
	TempInValidity *TemporalInValidity `bson:"tempInValidity,omitempty"`
}

