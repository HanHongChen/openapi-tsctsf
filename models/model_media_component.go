/*
 * Ntsctsf_QoSandTSCAssistance Service API
 *
 * TSCTSF QoS and TSC Assistance Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * Source file: 3GPP TS 29.565 V18.3.0; 5G System; Time Sensitive Communication and Time Synchronization function  Services; Stage 3. 
 * Url: https://www.3gpp.org/ftp/Specs/archive/29_series/29.565/
 *
 * API version: 1.1.0-alpha.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package models

import (
	
	"encoding/json"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/bsontype"
	
    "bitbucket.org/free5GC/openapi/custom"
)



// Identifies a media component.
type MediaComponent struct {
	// Contains an AF application identifier.
	AfAppId string `json:"afAppId,omitempty" yaml:"afAppId" bson:"afAppId,omitempty"`
	AfRoutReq *AfRoutingRequirement `json:"afRoutReq,omitempty" yaml:"afRoutReq" bson:"afRoutReq,omitempty"`
	AfSfcReq *custom.Nullable[AfSfcRequirement] `json:"afSfcReq,omitempty" yaml:"afSfcReq" bson:"afSfcReq,omitempty"`
	QosReference string `json:"qosReference,omitempty" yaml:"qosReference" bson:"qosReference,omitempty"`
	DisUeNotif bool `json:"disUeNotif,omitempty" yaml:"disUeNotif" bson:"disUeNotif,omitempty"`
	AltSerReqs []string `json:"altSerReqs,omitempty" yaml:"altSerReqs" bson:"altSerReqs,omitempty"`
	// Contains alternative service requirements that include individual QoS parameter sets. 
	AltSerReqsData []AlternativeServiceRequirementsData `json:"altSerReqsData,omitempty" yaml:"altSerReqsData" bson:"altSerReqsData,omitempty"`
	// Represents the content version of some content.
	ContVer int32 `json:"contVer,omitempty" yaml:"contVer" bson:"contVer,omitempty"`
	Codecs []string `json:"codecs,omitempty" yaml:"codecs" bson:"codecs,omitempty"`
	// string with format 'float' as defined in OpenAPI.
	DesMaxLatency float32 `json:"desMaxLatency,omitempty" yaml:"desMaxLatency" bson:"desMaxLatency,omitempty"`
	// string with format 'float' as defined in OpenAPI.
	DesMaxLoss float32 `json:"desMaxLoss,omitempty" yaml:"desMaxLoss" bson:"desMaxLoss,omitempty"`
	FlusId string `json:"flusId,omitempty" yaml:"flusId" bson:"flusId,omitempty"`
	FStatus FlowStatus `json:"fStatus,omitempty" yaml:"fStatus" bson:"fStatus,omitempty"`
	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	MarBwDl string `json:"marBwDl,omitempty" yaml:"marBwDl" bson:"marBwDl,omitempty"`
	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	MarBwUl string `json:"marBwUl,omitempty" yaml:"marBwUl" bson:"marBwUl,omitempty"`
	// This data type is defined in the same way as the 'PacketLossRate' data type, but with the OpenAPI 'nullable: true' property. 
	MaxPacketLossRateDl *custom.Nullable[int32] `json:"maxPacketLossRateDl,omitempty" yaml:"maxPacketLossRateDl" bson:"maxPacketLossRateDl,omitempty"`
	// This data type is defined in the same way as the 'PacketLossRate' data type, but with the OpenAPI 'nullable: true' property. 
	MaxPacketLossRateUl *custom.Nullable[int32] `json:"maxPacketLossRateUl,omitempty" yaml:"maxPacketLossRateUl" bson:"maxPacketLossRateUl,omitempty"`
	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	MaxSuppBwDl string `json:"maxSuppBwDl,omitempty" yaml:"maxSuppBwDl" bson:"maxSuppBwDl,omitempty"`
	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	MaxSuppBwUl string `json:"maxSuppBwUl,omitempty" yaml:"maxSuppBwUl" bson:"maxSuppBwUl,omitempty"`
	MedCompN int32 `json:"medCompN,omitempty" yaml:"medCompN" bson:"medCompN,omitempty"`
	// Contains the requested bitrate and filters for the set of service data flows identified by their common flow identifier. The key of the map is the fNum attribute. 
	MedSubComps map[string]MediaSubComponent `json:"medSubComps,omitempty" yaml:"medSubComps" bson:"medSubComps,omitempty"`
	MedType MediaType `json:"medType,omitempty" yaml:"medType" bson:"medType,omitempty"`
	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	MinDesBwDl string `json:"minDesBwDl,omitempty" yaml:"minDesBwDl" bson:"minDesBwDl,omitempty"`
	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	MinDesBwUl string `json:"minDesBwUl,omitempty" yaml:"minDesBwUl" bson:"minDesBwUl,omitempty"`
	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	MirBwDl string `json:"mirBwDl,omitempty" yaml:"mirBwDl" bson:"mirBwDl,omitempty"`
	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	MirBwUl string `json:"mirBwUl,omitempty" yaml:"mirBwUl" bson:"mirBwUl,omitempty"`
	PreemptCap PreemptionCapability `json:"preemptCap,omitempty" yaml:"preemptCap" bson:"preemptCap,omitempty"`
	PreemptVuln PreemptionVulnerability `json:"preemptVuln,omitempty" yaml:"preemptVuln" bson:"preemptVuln,omitempty"`
	PrioSharingInd PrioritySharingIndicator `json:"prioSharingInd,omitempty" yaml:"prioSharingInd" bson:"prioSharingInd,omitempty"`
	ResPrio ReservPriority `json:"resPrio,omitempty" yaml:"resPrio" bson:"resPrio,omitempty"`
	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	RrBw string `json:"rrBw,omitempty" yaml:"rrBw" bson:"rrBw,omitempty"`
	// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \"K\" is used to represent the standard symbol \"k\". 
	RsBw string `json:"rsBw,omitempty" yaml:"rsBw" bson:"rsBw,omitempty"`
	// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
	SharingKeyDl int32 `json:"sharingKeyDl,omitempty" yaml:"sharingKeyDl" bson:"sharingKeyDl,omitempty"`
	// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
	SharingKeyUl int32 `json:"sharingKeyUl,omitempty" yaml:"sharingKeyUl" bson:"sharingKeyUl,omitempty"`
	TsnQos *TsnQosContainer `json:"tsnQos,omitempty" yaml:"tsnQos" bson:"tsnQos,omitempty"`
	TscaiInputDl *custom.Nullable[TscaiInputContainer] `json:"tscaiInputDl,omitempty" yaml:"tscaiInputDl" bson:"tscaiInputDl,omitempty"`
	TscaiInputUl *custom.Nullable[TscaiInputContainer] `json:"tscaiInputUl,omitempty" yaml:"tscaiInputUl" bson:"tscaiInputUl,omitempty"`
	// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
	TscaiTimeDom int32 `json:"tscaiTimeDom,omitempty" yaml:"tscaiTimeDom" bson:"tscaiTimeDom,omitempty"`
	// Indicates the capability for AF to adjust the burst sending time, when it is supported and set to \"true\". The default value is \"false\" if omitted. 
	CapBatAdaptation bool `json:"capBatAdaptation,omitempty" yaml:"capBatAdaptation" bson:"capBatAdaptation,omitempty"`
	// Indicates the service data flow needs to meet the Round-Trip (RT) latency requirement of the service, when it is included and set to \"true\". The default value is \"false\" if omitted. 
	RTLatencyInd bool `json:"rTLatencyInd,omitempty" yaml:"rTLatencyInd" bson:"rTLatencyInd,omitempty"`
	PduSetQosDl *PduSetQosPara `json:"pduSetQosDl,omitempty" yaml:"pduSetQosDl" bson:"pduSetQosDl,omitempty"`
	PduSetQosUl *PduSetQosPara `json:"pduSetQosUl,omitempty" yaml:"pduSetQosUl" bson:"pduSetQosUl,omitempty"`
	ProtoDescDl *ProtocolDescription `json:"protoDescDl,omitempty" yaml:"protoDescDl" bson:"protoDescDl,omitempty"`
	ProtoDescUl *ProtocolDescription `json:"protoDescUl,omitempty" yaml:"protoDescUl" bson:"protoDescUl,omitempty"`
	// Indicates the time interval in units of milliseconds.
	PeriodUl int32 `json:"periodUl,omitempty" yaml:"periodUl" bson:"periodUl,omitempty"`
	// Indicates the time interval in units of milliseconds.
	PeriodDl int32 `json:"periodDl,omitempty" yaml:"periodDl" bson:"periodDl,omitempty"`
	L4sInd UplinkDownlinkSupport `json:"l4sInd,omitempty" yaml:"l4sInd" bson:"l4sInd,omitempty"`
}
var _ json.Unmarshaler = (*MediaComponent)(nil)

func (m *MediaComponent) UnmarshalJSON(data []byte) error {
	var err error
	var b _MediaComponentJSONUnmarshalBuffer
	if err = json.Unmarshal(data, &b); err != nil {
		return err
	}
	m.AfAppId = b.AfAppId
	m.AfRoutReq = b.AfRoutReq
	if len(b.AfSfcReq) != 0 {
		m.AfSfcReq = custom.NewNullableNull[AfSfcRequirement]()
		err = m.AfSfcReq.UnmarshalJSON(b.AfSfcReq)
		if err != nil {
			return err
		}
	}
	m.QosReference = b.QosReference
	m.DisUeNotif = b.DisUeNotif
	m.AltSerReqs = b.AltSerReqs
	m.AltSerReqsData = b.AltSerReqsData
	m.ContVer = b.ContVer
	m.Codecs = b.Codecs
	m.DesMaxLatency = b.DesMaxLatency
	m.DesMaxLoss = b.DesMaxLoss
	m.FlusId = b.FlusId
	m.FStatus = b.FStatus
	m.MarBwDl = b.MarBwDl
	m.MarBwUl = b.MarBwUl
	if len(b.MaxPacketLossRateDl) != 0 {
		m.MaxPacketLossRateDl = custom.NewNullableNull[int32]()
		err = m.MaxPacketLossRateDl.UnmarshalJSON(b.MaxPacketLossRateDl)
		if err != nil {
			return err
		}
	}
	if len(b.MaxPacketLossRateUl) != 0 {
		m.MaxPacketLossRateUl = custom.NewNullableNull[int32]()
		err = m.MaxPacketLossRateUl.UnmarshalJSON(b.MaxPacketLossRateUl)
		if err != nil {
			return err
		}
	}
	m.MaxSuppBwDl = b.MaxSuppBwDl
	m.MaxSuppBwUl = b.MaxSuppBwUl
	m.MedCompN = b.MedCompN
	m.MedSubComps = b.MedSubComps
	m.MedType = b.MedType
	m.MinDesBwDl = b.MinDesBwDl
	m.MinDesBwUl = b.MinDesBwUl
	m.MirBwDl = b.MirBwDl
	m.MirBwUl = b.MirBwUl
	m.PreemptCap = b.PreemptCap
	m.PreemptVuln = b.PreemptVuln
	m.PrioSharingInd = b.PrioSharingInd
	m.ResPrio = b.ResPrio
	m.RrBw = b.RrBw
	m.RsBw = b.RsBw
	m.SharingKeyDl = b.SharingKeyDl
	m.SharingKeyUl = b.SharingKeyUl
	m.TsnQos = b.TsnQos
	if len(b.TscaiInputDl) != 0 {
		m.TscaiInputDl = custom.NewNullableNull[TscaiInputContainer]()
		err = m.TscaiInputDl.UnmarshalJSON(b.TscaiInputDl)
		if err != nil {
			return err
		}
	}
	if len(b.TscaiInputUl) != 0 {
		m.TscaiInputUl = custom.NewNullableNull[TscaiInputContainer]()
		err = m.TscaiInputUl.UnmarshalJSON(b.TscaiInputUl)
		if err != nil {
			return err
		}
	}
	m.TscaiTimeDom = b.TscaiTimeDom
	m.CapBatAdaptation = b.CapBatAdaptation
	m.RTLatencyInd = b.RTLatencyInd
	m.PduSetQosDl = b.PduSetQosDl
	m.PduSetQosUl = b.PduSetQosUl
	m.ProtoDescDl = b.ProtoDescDl
	m.ProtoDescUl = b.ProtoDescUl
	m.PeriodUl = b.PeriodUl
	m.PeriodDl = b.PeriodDl
	m.L4sInd = b.L4sInd

	return nil
}

// _MediaComponentJSONUnmarshaler is used to unmarshal the null properties into the MediaComponent struct
type _MediaComponentJSONUnmarshalBuffer struct {
	AfAppId string `json:"afAppId,omitempty"`
	AfRoutReq *AfRoutingRequirement `json:"afRoutReq,omitempty"`
	AfSfcReq json.RawMessage `json:"afSfcReq,omitempty"`
	QosReference string `json:"qosReference,omitempty"`
	DisUeNotif bool `json:"disUeNotif,omitempty"`
	AltSerReqs []string `json:"altSerReqs,omitempty"`
	AltSerReqsData []AlternativeServiceRequirementsData `json:"altSerReqsData,omitempty"`
	ContVer int32 `json:"contVer,omitempty"`
	Codecs []string `json:"codecs,omitempty"`
	DesMaxLatency float32 `json:"desMaxLatency,omitempty"`
	DesMaxLoss float32 `json:"desMaxLoss,omitempty"`
	FlusId string `json:"flusId,omitempty"`
	FStatus FlowStatus `json:"fStatus,omitempty"`
	MarBwDl string `json:"marBwDl,omitempty"`
	MarBwUl string `json:"marBwUl,omitempty"`
	MaxPacketLossRateDl json.RawMessage `json:"maxPacketLossRateDl,omitempty"`
	MaxPacketLossRateUl json.RawMessage `json:"maxPacketLossRateUl,omitempty"`
	MaxSuppBwDl string `json:"maxSuppBwDl,omitempty"`
	MaxSuppBwUl string `json:"maxSuppBwUl,omitempty"`
	MedCompN int32 `json:"medCompN,omitempty"`
	MedSubComps map[string]MediaSubComponent `json:"medSubComps,omitempty"`
	MedType MediaType `json:"medType,omitempty"`
	MinDesBwDl string `json:"minDesBwDl,omitempty"`
	MinDesBwUl string `json:"minDesBwUl,omitempty"`
	MirBwDl string `json:"mirBwDl,omitempty"`
	MirBwUl string `json:"mirBwUl,omitempty"`
	PreemptCap PreemptionCapability `json:"preemptCap,omitempty"`
	PreemptVuln PreemptionVulnerability `json:"preemptVuln,omitempty"`
	PrioSharingInd PrioritySharingIndicator `json:"prioSharingInd,omitempty"`
	ResPrio ReservPriority `json:"resPrio,omitempty"`
	RrBw string `json:"rrBw,omitempty"`
	RsBw string `json:"rsBw,omitempty"`
	SharingKeyDl int32 `json:"sharingKeyDl,omitempty"`
	SharingKeyUl int32 `json:"sharingKeyUl,omitempty"`
	TsnQos *TsnQosContainer `json:"tsnQos,omitempty"`
	TscaiInputDl json.RawMessage `json:"tscaiInputDl,omitempty"`
	TscaiInputUl json.RawMessage `json:"tscaiInputUl,omitempty"`
	TscaiTimeDom int32 `json:"tscaiTimeDom,omitempty"`
	CapBatAdaptation bool `json:"capBatAdaptation,omitempty"`
	RTLatencyInd bool `json:"rTLatencyInd,omitempty"`
	PduSetQosDl *PduSetQosPara `json:"pduSetQosDl,omitempty"`
	PduSetQosUl *PduSetQosPara `json:"pduSetQosUl,omitempty"`
	ProtoDescDl *ProtocolDescription `json:"protoDescDl,omitempty"`
	ProtoDescUl *ProtocolDescription `json:"protoDescUl,omitempty"`
	PeriodUl int32 `json:"periodUl,omitempty"`
	PeriodDl int32 `json:"periodDl,omitempty"`
	L4sInd UplinkDownlinkSupport `json:"l4sInd,omitempty"`
}

var _ bson.Unmarshaler = (*MediaComponent)(nil)

func (m *MediaComponent) UnmarshalBSON(data []byte) error {
	var err error
	var b _MediaComponentBSONUnmarshalBuffer
	if err = bson.Unmarshal(data, &b); err != nil {
		return err
	}
	m.AfAppId = b.AfAppId
	m.AfRoutReq = b.AfRoutReq
	if b.AfSfcReq != nil {
		var bt bsontype.Type
		switch len(b.AfSfcReq) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeEmbeddedDocument
		}
		m.AfSfcReq = custom.NewNullableNull[AfSfcRequirement]()
		err = m.AfSfcReq.UnmarshalBSONValue(bt, b.AfSfcReq)
		if err != nil {
			return err
		}
	}
	m.QosReference = b.QosReference
	m.DisUeNotif = b.DisUeNotif
	m.AltSerReqs = b.AltSerReqs
	m.AltSerReqsData = b.AltSerReqsData
	m.ContVer = b.ContVer
	m.Codecs = b.Codecs
	m.DesMaxLatency = b.DesMaxLatency
	m.DesMaxLoss = b.DesMaxLoss
	m.FlusId = b.FlusId
	m.FStatus = b.FStatus
	m.MarBwDl = b.MarBwDl
	m.MarBwUl = b.MarBwUl
	if b.MaxPacketLossRateDl != nil {
		var bt bsontype.Type
		switch len(b.MaxPacketLossRateDl) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeInt32
		}
		m.MaxPacketLossRateDl = custom.NewNullableNull[int32]()
		err = m.MaxPacketLossRateDl.UnmarshalBSONValue(bt, b.MaxPacketLossRateDl)
		if err != nil {
			return err
		}
	}
	if b.MaxPacketLossRateUl != nil {
		var bt bsontype.Type
		switch len(b.MaxPacketLossRateUl) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeInt32
		}
		m.MaxPacketLossRateUl = custom.NewNullableNull[int32]()
		err = m.MaxPacketLossRateUl.UnmarshalBSONValue(bt, b.MaxPacketLossRateUl)
		if err != nil {
			return err
		}
	}
	m.MaxSuppBwDl = b.MaxSuppBwDl
	m.MaxSuppBwUl = b.MaxSuppBwUl
	m.MedCompN = b.MedCompN
	m.MedSubComps = b.MedSubComps
	m.MedType = b.MedType
	m.MinDesBwDl = b.MinDesBwDl
	m.MinDesBwUl = b.MinDesBwUl
	m.MirBwDl = b.MirBwDl
	m.MirBwUl = b.MirBwUl
	m.PreemptCap = b.PreemptCap
	m.PreemptVuln = b.PreemptVuln
	m.PrioSharingInd = b.PrioSharingInd
	m.ResPrio = b.ResPrio
	m.RrBw = b.RrBw
	m.RsBw = b.RsBw
	m.SharingKeyDl = b.SharingKeyDl
	m.SharingKeyUl = b.SharingKeyUl
	m.TsnQos = b.TsnQos
	if b.TscaiInputDl != nil {
		var bt bsontype.Type
		switch len(b.TscaiInputDl) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeEmbeddedDocument
		}
		m.TscaiInputDl = custom.NewNullableNull[TscaiInputContainer]()
		err = m.TscaiInputDl.UnmarshalBSONValue(bt, b.TscaiInputDl)
		if err != nil {
			return err
		}
	}
	if b.TscaiInputUl != nil {
		var bt bsontype.Type
		switch len(b.TscaiInputUl) {
		case 0:
			bt = bson.TypeNull
		default:
			bt = bson.TypeEmbeddedDocument
		}
		m.TscaiInputUl = custom.NewNullableNull[TscaiInputContainer]()
		err = m.TscaiInputUl.UnmarshalBSONValue(bt, b.TscaiInputUl)
		if err != nil {
			return err
		}
	}
	m.TscaiTimeDom = b.TscaiTimeDom
	m.CapBatAdaptation = b.CapBatAdaptation
	m.RTLatencyInd = b.RTLatencyInd
	m.PduSetQosDl = b.PduSetQosDl
	m.PduSetQosUl = b.PduSetQosUl
	m.ProtoDescDl = b.ProtoDescDl
	m.ProtoDescUl = b.ProtoDescUl
	m.PeriodUl = b.PeriodUl
	m.PeriodDl = b.PeriodDl
	m.L4sInd = b.L4sInd

	return nil
}

// _MediaComponentBSONUnmarshalBuffer is used to unmarshal the null properties into the MediaComponent struct
type _MediaComponentBSONUnmarshalBuffer struct {
	AfAppId string `bson:"afAppId,omitempty"`
	AfRoutReq *AfRoutingRequirement `bson:"afRoutReq,omitempty"`
	AfSfcReq bson.Raw `bson:"afSfcReq,omitempty"`
	QosReference string `bson:"qosReference,omitempty"`
	DisUeNotif bool `bson:"disUeNotif,omitempty"`
	AltSerReqs []string `bson:"altSerReqs,omitempty"`
	AltSerReqsData []AlternativeServiceRequirementsData `bson:"altSerReqsData,omitempty"`
	ContVer int32 `bson:"contVer,omitempty"`
	Codecs []string `bson:"codecs,omitempty"`
	DesMaxLatency float32 `bson:"desMaxLatency,omitempty"`
	DesMaxLoss float32 `bson:"desMaxLoss,omitempty"`
	FlusId string `bson:"flusId,omitempty"`
	FStatus FlowStatus `bson:"fStatus,omitempty"`
	MarBwDl string `bson:"marBwDl,omitempty"`
	MarBwUl string `bson:"marBwUl,omitempty"`
	MaxPacketLossRateDl bson.Raw `bson:"maxPacketLossRateDl,omitempty"`
	MaxPacketLossRateUl bson.Raw `bson:"maxPacketLossRateUl,omitempty"`
	MaxSuppBwDl string `bson:"maxSuppBwDl,omitempty"`
	MaxSuppBwUl string `bson:"maxSuppBwUl,omitempty"`
	MedCompN int32 `bson:"medCompN,omitempty"`
	MedSubComps map[string]MediaSubComponent `bson:"medSubComps,omitempty"`
	MedType MediaType `bson:"medType,omitempty"`
	MinDesBwDl string `bson:"minDesBwDl,omitempty"`
	MinDesBwUl string `bson:"minDesBwUl,omitempty"`
	MirBwDl string `bson:"mirBwDl,omitempty"`
	MirBwUl string `bson:"mirBwUl,omitempty"`
	PreemptCap PreemptionCapability `bson:"preemptCap,omitempty"`
	PreemptVuln PreemptionVulnerability `bson:"preemptVuln,omitempty"`
	PrioSharingInd PrioritySharingIndicator `bson:"prioSharingInd,omitempty"`
	ResPrio ReservPriority `bson:"resPrio,omitempty"`
	RrBw string `bson:"rrBw,omitempty"`
	RsBw string `bson:"rsBw,omitempty"`
	SharingKeyDl int32 `bson:"sharingKeyDl,omitempty"`
	SharingKeyUl int32 `bson:"sharingKeyUl,omitempty"`
	TsnQos *TsnQosContainer `bson:"tsnQos,omitempty"`
	TscaiInputDl bson.Raw `bson:"tscaiInputDl,omitempty"`
	TscaiInputUl bson.Raw `bson:"tscaiInputUl,omitempty"`
	TscaiTimeDom int32 `bson:"tscaiTimeDom,omitempty"`
	CapBatAdaptation bool `bson:"capBatAdaptation,omitempty"`
	RTLatencyInd bool `bson:"rTLatencyInd,omitempty"`
	PduSetQosDl *PduSetQosPara `bson:"pduSetQosDl,omitempty"`
	PduSetQosUl *PduSetQosPara `bson:"pduSetQosUl,omitempty"`
	ProtoDescDl *ProtocolDescription `bson:"protoDescDl,omitempty"`
	ProtoDescUl *ProtocolDescription `bson:"protoDescUl,omitempty"`
	PeriodUl int32 `bson:"periodUl,omitempty"`
	PeriodDl int32 `bson:"periodDl,omitempty"`
	L4sInd UplinkDownlinkSupport `bson:"l4sInd,omitempty"`
}

