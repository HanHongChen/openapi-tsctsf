/*
 * Ntsctsf_TimeSynchronization Service API
 *
 * TSCTSF Time Synchronization Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * Source file: 3GPP TS 29.565 V18.5.0; 5G System; Time Sensitive Communication and Time Synchronization Function  Services; Stage 3. 
 * Url: https://www.3gpp.org/ftp/Specs/archive/29_series/29.565/
 *
 * API version: 1.1.0-alpha.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package TimeSynchronization

import (
    "bitbucket.org/free5GC/openapi"
    "bitbucket.org/free5GC/openapi/models"

	"context"
	"io"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type IndividualTimeSynchronizationExposureSubscriptionDocumentApiService service

/*
IndividualTimeSynchronizationExposureSubscriptionDocumentApiService Delete an Individual TimeSynchronization Exposure Subscription
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param SubscriptionId - String identifying an Individual Time Synchronization Exposure Subscription.

@return DeleteIndividualTimeSynchronizationExposureSubscriptionResponse
*/

// DeleteIndividualTimeSynchronizationExposureSubscriptionRequest
type DeleteIndividualTimeSynchronizationExposureSubscriptionRequest struct {
    SubscriptionId *string
}

func (r *DeleteIndividualTimeSynchronizationExposureSubscriptionRequest) SetSubscriptionId(SubscriptionId string) {
    r.SubscriptionId = &SubscriptionId
}

type DeleteIndividualTimeSynchronizationExposureSubscriptionResponse struct {
        }

type DeleteIndividualTimeSynchronizationExposureSubscriptionError struct {
    Location string
Var3gppSbiTargetNfId string
    ProblemDetails *models.ProblemDetails
RedirectResponse *models.RedirectResponse
}

func (a *IndividualTimeSynchronizationExposureSubscriptionDocumentApiService) DeleteIndividualTimeSynchronizationExposureSubscription(ctx context.Context, request *DeleteIndividualTimeSynchronizationExposureSubscriptionRequest) (*DeleteIndividualTimeSynchronizationExposureSubscriptionResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Delete")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DeleteIndividualTimeSynchronizationExposureSubscriptionResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/subscriptions/{subscriptionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionId"+"}", openapi.StringOfValue(*request.SubscriptionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	

    localVarHTTPContentTypes := []string{"application/json"}

    localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{ "application/json", "application/problem+json" }

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}




	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

    apiError := openapi.GenericOpenAPIError{
        RawBody:     localVarBody,
        ErrorStatus: localVarHTTPResponse.StatusCode,
    }

    switch localVarHTTPResponse.StatusCode {
        case 204:
            return &localVarReturnValue, nil
        case 307:
            var v DeleteIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.RedirectResponse, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            v.Location = localVarHTTPResponse.Header.Get("Location")
            v.Var3gppSbiTargetNfId = localVarHTTPResponse.Header.Get("3gpp-Sbi-Target-Nf-Id")
            apiError.ErrorModel = v
            return nil, apiError
        case 308:
            var v DeleteIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.RedirectResponse, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            v.Location = localVarHTTPResponse.Header.Get("Location")
            v.Var3gppSbiTargetNfId = localVarHTTPResponse.Header.Get("3gpp-Sbi-Target-Nf-Id")
            apiError.ErrorModel = v
            return nil, apiError
        case 400:
            var v DeleteIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 401:
            var v DeleteIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 403:
            var v DeleteIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 404:
            var v DeleteIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 429:
            var v DeleteIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 500:
            var v DeleteIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 502:
            var v DeleteIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 503:
            var v DeleteIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        default:
            return nil, apiError
    }
}



/*
IndividualTimeSynchronizationExposureSubscriptionDocumentApiService Reads an existing Individual Time Synchronization Exposure Subscription
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param SubscriptionId - String identifying an Individual Time Synchronization Exposure Subscription

@return GetIndividualTimeSynchronizationExposureSubscriptionResponse
*/

// GetIndividualTimeSynchronizationExposureSubscriptionRequest
type GetIndividualTimeSynchronizationExposureSubscriptionRequest struct {
    SubscriptionId *string
}

func (r *GetIndividualTimeSynchronizationExposureSubscriptionRequest) SetSubscriptionId(SubscriptionId string) {
    r.SubscriptionId = &SubscriptionId
}

type GetIndividualTimeSynchronizationExposureSubscriptionResponse struct {
        TimeSyncExposureSubsc *models.TimeSyncExposureSubsc
}

type GetIndividualTimeSynchronizationExposureSubscriptionError struct {
    Location string
Var3gppSbiTargetNfId string
    ProblemDetails *models.ProblemDetails
RedirectResponse *models.RedirectResponse
}

func (a *IndividualTimeSynchronizationExposureSubscriptionDocumentApiService) GetIndividualTimeSynchronizationExposureSubscription(ctx context.Context, request *GetIndividualTimeSynchronizationExposureSubscriptionRequest) (*GetIndividualTimeSynchronizationExposureSubscriptionResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetIndividualTimeSynchronizationExposureSubscriptionResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/subscriptions/{subscriptionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionId"+"}", openapi.StringOfValue(*request.SubscriptionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	

    localVarHTTPContentTypes := []string{"application/json"}

    localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{ "application/json", "application/problem+json" }

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}




	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

    apiError := openapi.GenericOpenAPIError{
        RawBody:     localVarBody,
        ErrorStatus: localVarHTTPResponse.StatusCode,
    }

    switch localVarHTTPResponse.StatusCode {
        case 200:
            err = openapi.Deserialize(&localVarReturnValue.TimeSyncExposureSubsc, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            return &localVarReturnValue, nil
        case 307:
            var v GetIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.RedirectResponse, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            v.Location = localVarHTTPResponse.Header.Get("Location")
            v.Var3gppSbiTargetNfId = localVarHTTPResponse.Header.Get("3gpp-Sbi-Target-Nf-Id")
            apiError.ErrorModel = v
            return nil, apiError
        case 308:
            var v GetIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.RedirectResponse, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            v.Location = localVarHTTPResponse.Header.Get("Location")
            v.Var3gppSbiTargetNfId = localVarHTTPResponse.Header.Get("3gpp-Sbi-Target-Nf-Id")
            apiError.ErrorModel = v
            return nil, apiError
        case 400:
            var v GetIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 401:
            var v GetIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 403:
            var v GetIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 404:
            var v GetIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 406:
            var v GetIndividualTimeSynchronizationExposureSubscriptionError
            apiError.ErrorModel = v
            return nil, apiError
        case 429:
            var v GetIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 500:
            var v GetIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 502:
            var v GetIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 503:
            var v GetIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        default:
            return nil, apiError
    }
}



/*
IndividualTimeSynchronizationExposureSubscriptionDocumentApiService Replace an individual Time Synchronization Exposure Subscription
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param SubscriptionId - String identifying an Individual Time Synchronization Exposure Subscription.
 * @param TimeSyncExposureSubsc - 

@return ReplaceIndividualTimeSynchronizationExposureSubscriptionResponse
*/

// ReplaceIndividualTimeSynchronizationExposureSubscriptionRequest
type ReplaceIndividualTimeSynchronizationExposureSubscriptionRequest struct {
    SubscriptionId *string
    TimeSyncExposureSubsc *models.TimeSyncExposureSubsc
}

func (r *ReplaceIndividualTimeSynchronizationExposureSubscriptionRequest) SetSubscriptionId(SubscriptionId string) {
    r.SubscriptionId = &SubscriptionId
}
func (r *ReplaceIndividualTimeSynchronizationExposureSubscriptionRequest) SetTimeSyncExposureSubsc(TimeSyncExposureSubsc models.TimeSyncExposureSubsc) {
    r.TimeSyncExposureSubsc = &TimeSyncExposureSubsc
}

type ReplaceIndividualTimeSynchronizationExposureSubscriptionResponse struct {
        TimeSyncExposureSubsc *models.TimeSyncExposureSubsc
}

type ReplaceIndividualTimeSynchronizationExposureSubscriptionError struct {
    Location string
Var3gppSbiTargetNfId string
    ProblemDetails *models.ProblemDetails
RedirectResponse *models.RedirectResponse
}

func (a *IndividualTimeSynchronizationExposureSubscriptionDocumentApiService) ReplaceIndividualTimeSynchronizationExposureSubscription(ctx context.Context, request *ReplaceIndividualTimeSynchronizationExposureSubscriptionRequest) (*ReplaceIndividualTimeSynchronizationExposureSubscriptionResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Put")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ReplaceIndividualTimeSynchronizationExposureSubscriptionResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/subscriptions/{subscriptionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionId"+"}", openapi.StringOfValue(*request.SubscriptionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	
    localVarHTTPContentTypes := []string{ "application/json" }
    
    localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{ "application/json", "application/problem+json" }

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}



	// body params
	localVarPostBody = request.TimeSyncExposureSubsc


	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
    if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

    apiError := openapi.GenericOpenAPIError{
        RawBody:     localVarBody,
        ErrorStatus: localVarHTTPResponse.StatusCode,
    }

    switch localVarHTTPResponse.StatusCode {
        case 200:
            err = openapi.Deserialize(&localVarReturnValue.TimeSyncExposureSubsc, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            return &localVarReturnValue, nil
        case 204:
            return &localVarReturnValue, nil
        case 307:
            var v ReplaceIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.RedirectResponse, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            v.Location = localVarHTTPResponse.Header.Get("Location")
            v.Var3gppSbiTargetNfId = localVarHTTPResponse.Header.Get("3gpp-Sbi-Target-Nf-Id")
            apiError.ErrorModel = v
            return nil, apiError
        case 308:
            var v ReplaceIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.RedirectResponse, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            v.Location = localVarHTTPResponse.Header.Get("Location")
            v.Var3gppSbiTargetNfId = localVarHTTPResponse.Header.Get("3gpp-Sbi-Target-Nf-Id")
            apiError.ErrorModel = v
            return nil, apiError
        case 400:
            var v ReplaceIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 401:
            var v ReplaceIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 403:
            var v ReplaceIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 404:
            var v ReplaceIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 411:
            var v ReplaceIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 413:
            var v ReplaceIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 415:
            var v ReplaceIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 429:
            var v ReplaceIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 500:
            var v ReplaceIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 502:
            var v ReplaceIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        case 503:
            var v ReplaceIndividualTimeSynchronizationExposureSubscriptionError
            err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
            if err != nil {
                return nil, err
            }
            apiError.ErrorModel = v
            return nil, apiError
        default:
            return nil, apiError
    }
}


